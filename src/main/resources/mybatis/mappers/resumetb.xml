<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.boot.dao.ResumetbDAO">
	
	<!-- 이력서 저장 -->
	<insert id="resumesave">
		<selectKey keyProperty="prono" resultType="int" order="BEFORE">
			select ifnull(max(prono), 0) + 1 as prono
			from resumetb
			where puserid = #{puserid}
		</selectKey>
		insert into resumetb (puserid, prono, protitle, prstitle, pname, gender, birdy, imgcd, email, phone, paddr,
							  prsup, prsself, classgb, shoolnm, grade, gradesta, majornm, credit, score,
							  sdate, edate, salary, armgu, propo, proself, prcnt, job, adate)
					values (#{puserid}, #{prono}, #{protitle}, #{prstitle}, #{pname}, #{gender}, #{birdy}, #{imgcd}, #{email}, #{phone}, #{paddr},
							#{prsup}, #{prsself}, #{classgb}, #{shoolnm}, #{grade}, #{gradesta}, #{majornm}, #{credit}, #{score},
							#{sdate}, #{edate}, #{salary}, #{armgu}, #{propo}, #{proself}, #{prcnt}, #{job}, now())
	</insert>
	
	<!-- 페이징처리한다고 수정 -->
	<select id="resumelist" resultType="com.boot.dto.ResumetbDTO">
		select puserid, prono, protitle, prstitle, imgno, usetb, gubun, uuid, uploadpath, adate, rn, representative
		from
		(
			select puserid, prono, protitle, prstitle, imgno, usetb, gubun, uuid, uploadpath, adate, rn, representative
			from
			(
				select a.puserid, a.prono, a.protitle, a.prstitle, b.imgno, b.usetb, b.gubun, b.uuid, b.uploadpath, a.adate, a.representative,
					   row_number() over(order by a.adate desc) as rn
			    from resumetb a
			    left outer join imgtb b on (b.usetb = 'resumetb' and b.gubun = concat(a.puserid, '_', a.prono))
			) as a
			where puserid = #{puserid}
		) as a
		where rn between ((#{pageNum} - 1) * #{amount}) + 1 and #{pageNum} * #{amount};
	</select>
	
	<!-- 페이징 카운터 -->
	<select id="getTotalCount" resultType="int">
		select count(*)
        from
			(	
				select a.puserid, a.prono, a.protitle, a.prstitle, b.imgno, b.usetb, b.gubun, b.uuid, b.uploadpath, a.adate
			    from resumetb a
			    left outer join imgtb b on (b.usetb = 'resumetb' and b.gubun = concat(a.puserid, '_', a.prono))
			) as a
		where puserid = #{puserid} 
	</select>
	
	<!-- 선택한 리스트 출력 -->
	 <select id="resumeselect" resultType="com.boot.dto.ResumetbDTO">
        select a.puserid, a.prono, a.protitle, a.prstitle, a.pname, a.gender, a.birdy, a.imgcd, a.email, 
               a.phone, a.paddr, a.prsup, a.prsself, a.classgb, a.shoolnm, a.grade, a.gradesta, a.majornm,
               a.credit, a.score, a.sdate, a.edate, a.salary, a.armgu, a.propo, a.proself, a.prcnt, a.adate, a.mdate,
               b.imgno, b.usetb, b.gubun, b.uuid, b.uploadpath, a.representative, a.job
        from resumetb a
        left outer join imgtb b on (b.usetb = 'resumetb' and b.gubun = concat(a.puserid, '_', a.prono))
        where a.puserid = #{puserid} and a.prono = #{prono}
    </select>
	
	<!-- 이력서 번호 최댓값 가져오기 -->
	<select id="getMaxProno" resultType="int">
		select max(prono) as prono
		from resumetb
		where puserid = #{puserid} 
	</select>
	
	<!-- 선택한 이력서 삭제 -->
	<delete id="resumedelete">
		delete from resumetb
		where puserid = #{puserid} and prono = ${prono}
	</delete>
	
	<!-- 이력서 뷰어에서 출력 -->
    <select id="resume_view" resultType="com.boot.dto.ResumetbDTO">
        select a.puserid, a.prono, a.protitle, a.prstitle, a.pname, a.gender, a.birdy, a.imgcd, a.email, 
               a.phone, a.paddr, a.prsup, a.prsself, a.classgb, a.shoolnm, a.grade, a.gradesta, a.majornm,
               a.credit, a.score, a.sdate, a.edate, a.salary, a.armgu, a.propo, a.proself, a.prcnt, a.adate, a.mdate,
               b.imgno, b.usetb, b.gubun, b.uuid, b.uploadpath, a.representative, c.sortnm as job
        from resumetb a
        left outer join imgtb b on (b.usetb = 'resumetb' and b.gubun = concat(a.puserid, '_', a.prono))
        left outer join jobsorttb c on a.job = c.sortno
        where a.puserid = #{puserid} and a.prono = #{prono}
    </select>
	
	<!-- 지원하기 팝업창에서 이력서 목록 출력 -->
	<select id="getResumeList" resultType="com.boot.dto.ResumetbDTO">
        SELECT prono, protitle
        FROM resumetb
        WHERE puserid = #{puserid}
    </select>
	
	<!-- 이력서 업데이트 -->
	<update id="resumeupdate">
		update resumetb set protitle = #{protitle}, prstitle = #{prstitle}, pname = #{pname}, gender = #{gender}, birdy = #{birdy}, imgcd = #{imgcd}, email = #{email}, 
						    phone = #{phone}, paddr = #{paddr}, prsself = #{prsself}, classgb = #{classgb}, shoolnm = #{shoolnm}, gradesta = #{gradesta}, majornm = #{majornm}, 
						    credit = #{credit}, score = #{score}, sdate = #{sdate}, edate = #{edate}, salary = #{salary}, armgu = #{armgu}, proself = #{proself}, propo = #{propo},
        					job = #{job}, mdate = now()
		where puserid = #{puserid} and prono = #{prono} 
	</update>
	
	<!-- 모든 이력서의 대표 이력서 상태 해제 -->
    <update id="resetAllRepresentative">
        UPDATE resumetb
        SET representative = false
        WHERE puserid = #{puserid}
    </update>

    <!-- 지정된 이력서를 대표 이력서로 설정 -->
    <update id="setRepresentative">
        UPDATE resumetb
        SET representative = true
        WHERE puserid = #{puserid} AND prono = #{prono}
    </update>
	
	<sql id="skillSearch"> <!-- 스킬 검색 조건 필요 -->
		<where>
			<if test="skill_s != null and skill_s != ''"> <!-- 학력 -->
			    and a.skillname in <!-- 학력 -->
			    <!-- career_s 문자열을 ','로 분리하여 배열로 만들어 IN 절에 사용 -->
		        <foreach item="item" index="index" collection="skill_s.split(',')" open="(" separator="," close=")">
		            #{item}
		        </foreach>
		    </if>
		</where>
	</sql>
	
	<select id="skillselect" resultType="com.boot.dto.ResumetbDTO">
	    select a.puserid, a.prono, a.sequeno, a.skillname, 
	           a.protitle, a.pname, a.gender, a.birdy, a.imgcd, a.email, a.phone, a.paddr, a.prsup, a.prsself, 
	           a.classgb, a.shoolnm, a.grade, a.gradesta, a.majornm, a.credit, a.sdate, a.edate, a.salary, a.armgu, a.propo, a.proself, a.prcnt, a.adate, a.mdate, a.representative, a.rn
	    from (
	        select s.puserid, s.prono, s.sequeno, s.skillname,
	               r.protitle, r.pname, r.gender, r.birdy, r.imgcd, r.email, r.phone, r.paddr, r.prsup, r.prsself,
	               r.classgb, r.shoolnm, r.grade, r.gradesta, r.majornm, r.credit, r.sdate, r.edate, r.salary, r.armgu, r.propo, r.proself, r.prcnt, r.adate, r.mdate, r.representative,
	               row_number() over(order by r.adate asc) as rn
	        from skilltb s
	        inner join resumetb r on s.puserid = r.puserid
	        where r.representative = 1
	        <include refid="skillSearch"></include>
	    ) a
	    inner join showskilltb b on a.sequeno = b.skillno
	    where a.rn between ((#{pageNum} - 1) * #{amount}) + 1 and #{pageNum} * #{amount};
	</select>
	
	<select id="getCount" resultType="int">
	    select count(*)
	    from (
	        select s.puserid, s.prono, s.sequeno, s.skillname,
	               r.protitle, r.pname, r.gender, r.birdy, r.imgcd, r.email, r.phone, r.paddr, r.prsup, r.prsself,
	               r.classgb, r.shoolnm, r.grade, r.gradesta, r.majornm, r.credit, r.sdate, r.edate, r.salary, r.armgu, r.propo, r.proself, r.prcnt, r.adate, r.mdate, r.representative,
	               row_number() over(order by r.adate asc) as rn
	        from skilltb s
	        inner join resumetb r on s.puserid = r.puserid
	        where r.representative = 1
	        <include refid="skillSearch"></include>
	    ) a
	</select>
	
	<select id="mainlist" resultType="com.boot.dto.ResumetbDTO">
        select puserid, protitle, pname
        from
        (
			select a.puserid, b.protitle, b.pname
			from skilltb a
			join resumetb b on (a.puserid = b.puserid)
        ) as a
        order by notic desc
        LIMIT 10
    </select>
	
</mapper>